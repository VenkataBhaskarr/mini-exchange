/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;

public class App {
    private static int PROCESSING_THREADS = 4;
    private static List<Stock> stocks;
    private static List<Order> orders;
    private static List<Transaction> transactions;
    public static void main(String[] args) {
        // String a = args[0];
       Scanner sc = new Scanner(System.in);
       stocks = new ArrayList<>();
       orders = new ArrayList<>();
       transactions = new ArrayList<>();

       while(true){
         System.out.println("1. Enter as trader into the exchange ?");
         System.out.println("2. Enter as Admin into the exchange ?");
         System.out.println("3. Exit !");
         String input = sc.nextLine();
         switch (input) {
            case "1": {
                gameStartsAsTrader(sc);
                break;
            }
            case "2": {
                gameStartsAsAdmin(sc);
                break;
            }
            case "3": {
                return;
            }
            default: {
                break;
            }
         }
         
       }
    }

    public static void gameStartsAsAdmin(Scanner sc){
        System.out.println("1. Enter new entry in stock? ");
        System.out.println("2. Check the transactions? ");
        String input = sc.nextLine();
        switch (input) {
            case "1": {
                Stock stock = new Stock();
                System.out.println("Enter stock name : ");
                String s_name = sc.nextLine();
                stock.setName(s_name);
                // System.out.println("enter stock quantity : ");
                // long s_quantity = sc.nextLong();
                // sc.nextLine();
                // stock.setAvailableQuantity(s_quantity);
                // System.out.println("Enter the stock price : ");
                // double stock_price = sc.nextDouble();
                // sc.nextLine();
                // stock.setPrice(stock_price);
                stocks.add(stock);
                break;
            }
            case "2": {
                printTransactions();
            }
            default:
                break;
        }

        return;
    }

    public static void printTransactions(){
        for(Transaction transaction: transactions){
            transaction.printTransaction();
        }
    }

    public static void gameStartsAsTrader(Scanner sc){
        System.out.println("1. Seach the available stocks?");
        System.out.println("2. Check the order book of certain stock?");
        System.out.println("3. Place an order CSV");
        System.out.println("4. Exit");
        String order = sc.nextLine();
        switch(order) {
            case "1" : {
                listAllStocks();
                break;
            }
            case "2" : {
                String stockname = sc.nextLine();
                stockOrderBook(stockname);
                break;
            }
            case "3" : {
                handleCSVOrders();
                break;
            }
            case "4" : {
                return;
            }
            default : {
                break;
            }
        }
    }

    public static void handleCSVOrders(){
        File file = new File("/Users/apple/Desktop/dev/exchange-java/app/data/orders.csv");
        try{
            ExecutorService service = Executors.newFixedThreadPool(PROCESSING_THREADS);
            BufferedReader br = new BufferedReader(new FileReader(file));
            String line;
            List<String> lines = new ArrayList<>();
            while((line = br.readLine())  != null){
                final String line_opt = line;
                // START, Please optimize this code as well.
                // service.execute(() -> handleOrder(line_opt));
                lines.add(line_opt);
                // END.
            }
            CountDownLatch latch = new CountDownLatch(lines.size());
            System.out.println(lines.size());
            for(String single_line: lines){
                try{
                    service.execute(() -> handleOrder(single_line));
                }catch(Exception e){
                    System.out.println(e);
                }finally{
                    System.out.println("LATCH COUNTDOWN");
                    latch.countDown();
                }
            }

            if(latch.await(60, TimeUnit.SECONDS)){
                //
            }else{
               
                System.out.println("waiting for threads to complete");
            }

            br.close();
            service.shutdown();
        }catch(Exception e){
            System.out.println(e);
            return;
        }
    }

    public static void handleOrder(String line){
        //System.out.println("Order is handling by " + Thread.currentThread().getName());
        String[] orderInfo = line.split(",");
        List<String> cleanOrderInfo = new ArrayList<>();
        if(orderInfo.length < 4) return;

        Order order = null;
        for(String info: orderInfo){
            if(info.equals("") || info.equals(" ")){
                //skip
            }else{
                cleanOrderInfo.add(info);
            }
        }
        order = new Order(cleanOrderInfo.get(0),
                  cleanOrderInfo.get(1),
                  Integer.parseInt(cleanOrderInfo.get(2)),
                  Double.parseDouble(cleanOrderInfo.get(3)));

        //order.printOrder();
    
        // // START, Please optimize the code from here
        for(Stock stock: stocks){
            if(stock.getName().equals(order.getStock())){
               // System.out.println(order.getType());
                if(order.getType().strip().equals("BUY")){
                   // System.out.println("adding buy order");
                    stock.addBuyOrder(order);
                }else{
                  //  System.out.println("adding sell order");
                    stock.addSellOrder(order);
                }
            }
        }

        for(Stock stock: stocks){
             if(stock.getName().equals(order.getStock())){
                //System.out.println("processing the order");
                processOrderBookOfTheStock(stock);
             }
        }
        // END.

    }

    public static void processOrderBookOfTheStock(Stock stock){
        Order buyorder = stock.getBuyOrderPeek();
        Order sellorder = stock.getSellOrderPeek();
        if(buyorder == null || sellorder == null) return;
        if(buyorder.getPrice() >= sellorder.getPrice()){
            // stock.removeBuyOrderPeek();
            // stock.removeSellOrderPeek();
            stock.setCurrentPrice(sellorder.getPrice());
            if(buyorder.getQuantity() > sellorder.getQuantity()){
                int updatedQuantity = buyorder.getQuantity() - sellorder.getQuantity();
                buyorder.setQuantity(updatedQuantity);
                stock.addBuyOrder(buyorder);
            }else if(buyorder.getQuantity() < sellorder.getQuantity()){
                int updatedQuantity = sellorder.getQuantity() - buyorder.getQuantity();
                sellorder.setQuantity(updatedQuantity);
                stock.addSellOrder(sellorder);
            }else{
                // do nothing as of now.
            }
            Transaction transaction = new Transaction(stock.getName(), stock.getCurrentPrice());
            transactions.add(transaction);
        }
        return;
    }

    public static void stockOrderBook(String stock_name){

    }
    
    public static void listAllStocks(){
        for(Stock stock: stocks){
            System.out.println(stock.getName());
        }
    }
}
